#!/usr/bin/ruby
require 'tempfile'

# Sending mail not working on mac os x ?
# http://www.macosxhints.com/article.php?story=20081217161612647

# install
# > sudo cp gold /usr/local/bin/
# > chmod a+x /usr/local/bin/gold

# TODO: move Settings inside each project ?

class Gold
  Settings = {
    :gold_branch     => 'gold',                  # name of local branch tracking gold master (in developer's local git)
    :gold_remote     => 'zena',                  # name of remote 'gold' reference project
    :gold_repository => 'git://github.com/zena/zena.git',
    :developer_name  => 'john',                  # developer's name (same as github account)
    :developer_email => 'developer@example.com', # developer's email
    :reviewer        => 'reviewer@example.com'   # reviewer's email
  }

  def run(args)
    case args[0]
    when 'add_dev'
      add_dev args[1], args[2]
    when 'check', 'review'
      review args[1]
    when 'propose'
      propose args[1]
    else
      if self.respond_to?(args[0])
        send(args[0])
      else
        show_usage
      end
    end
  end

  def setup
    return error("Could create remote #{Settings[:gold_remote]}.") unless system("git remote add #{Settings[:gold_remote]} #{Settings[:gold_repository]}")
    return error("Could not fetch #{Settings[:gold_remote]}.") unless system("git fetch #{Settings[:gold_remote]}")
    return error("Could not create #{Settings[:gold_branch]} branch.") unless system("git checkout --track -b #{Settings[:gold_branch]} #{Settings[:gold_remote]}/master")
  end

  def propose(msg)
    branch = current_branch
    return error("Could not find current branch.") unless branch
    return error("You cannot propose the #{Settings[:gold_branch]} branch !") if branch == Settings[:gold_branch]
    return error("You cannot propose the master branch !") if branch == 'master'
    return error("Could not checkout #{Settings[:gold_branch]}.") unless system("git checkout #{Settings[:gold_branch]}")
    return error("Could not pull #{Settings[:gold_branch]}.") unless system("git pull")
    return error("Could not checkout #{branch}.") unless system("git checkout #{branch}")
    return error("Could not rebase #{branch} with #{Settings[:gold_branch]}.") unless system("git rebase #{Settings[:gold_branch]}")
    return error("Could not push #{branch} to origin.") unless system("git push origin +#{branch}")
    subject = "#{Settings[:gold_remote]}: review #{Settings[:developer_name]}/#{branch}"
    tmpf = Tempfile.new('gold_msg')
    tmpf.write %Q{From:#{Settings[:developer_email]}
Subject:#{subject}

============
gold review #{Settings[:developer_name]}/#{branch}
============

#{msg}
}
    tmpf.close
    return error("Could not send email to #{Settings[:reviewer]}.") unless system("sendmail -F '#{Settings[:developer_name]}' #{Settings[:reviewer]} < #{tmpf.path}")
    tmpf.delete
    puts "Mail sent to #{Settings[:reviewer]}"
  end

  def add_dev(name, repo = nil)
    return error("Missing 'developer name' parameter.") unless name
    repo ||= "git://github.com/#{name}/#{Settings[:gold_remote]}.git"
    return error("Could add developer #{name} (#{repo}).") unless system("git remote add #{name} #{repo}")
    return error("Could not fetch #{name}.") unless system("git fetch #{name}")
  end

  def review(remote_branch)
    return error("Missing 'remote_branch' parameter.") unless remote_branch
    return error("'remote_branch' format should be remote/branch.") unless remote_branch =~ /^(.+)\/(.+)$/
    remote, branch = $1, $2
    return error("Could not checkout master.") unless system("git co master")
    return error("Could not checkout #{remote}_#{branch}.") unless system("git co -b #{remote}_#{branch}")
    return error("Could not pull #{remote_branch}.") unless system("git pull #{remote} #{branch}")
    return error("Could not rebase.") unless system("git rebase master")
    system("git diff master | mate")
    true
  end

  def ok
    branch = current_branch
    return error("Could not find current branch.") unless branch
    return error("Could not rebase.") unless system("git rebase master")
    return error("Could not checkout master.") unless system("git co master")
    return error("Could not fast-forward merge #{branch} into master.") unless system("git merge --ff #{branch}")
    return error("Could not delete #{branch}.") unless system("git branch -d #{branch}")
    puts "-------------------\n\nSuccessfully applied #{branch} to golden master !\n\nPlease git push when you are ready."
  end

  def fail
    branch = current_branch
    return error("Could not find current branch.") unless branch
    return error("You cannot 'fail' master !") unless branch != 'master'
    return error("Could not checkout master.") unless system("git co master")
    return nil unless remove(branch, true)
  end

  def cleanup
    branch = current_branch
    return error("Could not find current branch.") unless branch
    return error("You cannot 'cleanup' master or #{Settings[:gold_branch]} !") if branch == 'master' || branch == Settings[:gold_branch]
    return error("Could not checkout #{Settings[:gold_branch]}.") unless system("git co #{Settings[:gold_branch]}")
    return error("Could not pull #{Settings[:gold_remote]}.") unless system("git pull #{Settings[:gold_remote]}")
    return error("Could not checkout #{branch}.") unless system("git co #{branch}")
    return error("Could rebase on top of #{Settings[:gold_branch]}.") unless system("git rebase #{Settings[:gold_branch]}")
    return error("Could not checkout #{Settings[:gold_branch]}.") unless system("git co #{Settings[:gold_branch]}")
    return nil unless remove(branch)
    return error("Could not clear remote branch.") unless system("git push origin :#{branch}")
  end


  private

    def error(msg)
      puts msg
      nil
    end

    def current_branch
      branch = nil
      `git branch`.split("\n").each do |b|
        if b =~ /^\*\s+(.+)$/
          branch = $1
          break
        end
      end
      branch
    end

    def remove(branch, force=false)
      print "Remove branch #{branch} ? (y,N) "
      yn = STDIN.gets
      if yn.downcase.strip == 'y'
        return error("Could not delete #{branch}.") unless system("git branch -#{force ? 'D' : 'd'} #{branch}")
        true
      else
        return error("Could not checkout #{branch}.") unless system("git co #{branch}")
        false
      end
    end

    def show_usage
      error(%Q{
Usage:

Reviewer
========

Add a new developer reference
-----------------------------
> gold add_dev john
or
> gold add_dev john git://github.com/john/foo.git

Checkout a remote branch and view diff
--------------------------------------
> gold check john/floppy

Include commits into master branch
----------------------------------
(on the new feature branch created by previous 'review')
> gold ok

The code is not ready yet, cleanup
----------------------------------
(on the new feature branch created by previous 'review')
> gold fail

Developer
=========

Setup
-----
> gold setup

Propose branch
--------------
(on the new feature branch)
> gold propose

Cleanup after commit acceptation
--------------------------------
(on the new feature branch)
> gold cleanup

})
    end
end

Gold.new.run ARGV